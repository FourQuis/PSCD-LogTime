integration_testing:
  image: php:7.4-alpine3.13
  services:
    - name: mysql:latest
      alias: mysql
      command: ["--default-authentication-plugin=mysql_native_password"]
  variables:
    MYSQL_DATABASE: cattr_tests
    MYSQL_ROOT_PASSWORD: secret
  stage: test
  before_script:
    - apk update
    - apk add libpng-dev freetype-dev libjpeg-turbo-dev libjpeg-turbo libpng freetype libzip libzip-dev git
    - docker-php-ext-configure gd --with-jpeg=/usr/include/ --with-freetype=/usr/include/
    - docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) gd
    - docker-php-ext-install bcmath zip pdo_mysql
    - apk add --no-cache $PHPIZE_DEPS
    - pecl install xdebug-2.9.8
    - docker-php-ext-enable xdebug
    - curl --silent --show-error https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  script:
    - COMPOSER_MEMORY_LIMIT=-1 composer install
    - cp .env.testing.example .env.testing
    - php artisan migrate --env=testing
    - php artisan db:seed --class=InitialSeeder --env=testing
    - php -c .testing.ini vendor/phpunit/phpunit/phpunit --coverage-text --colors=never --configuration phpunit.xml tests/Feature/

apidoc_deploy:
  image: node:alpine
  stage: deploy
  only:
    - release
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_DEPLOY_SECRET" | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - npm install
  script:
    - npm run custom-api
    - ssh cattr-deploy@docs.cattr.app 'rm -rf /srv/docs/api/*'
    - scp -r apidoc/* cattr-deploy@docs.cattr.app:/srv/docs/api

live_deploy:
  image: alpine
  stage: deploy
  only:
    - pre-release
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$CI_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $CI_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $CI_USER@$CI_HOST 'cd cattr/backend && git pull'
    - ssh $CI_USER@$CI_HOST 'cd cattr/backend && git submodule update --init'
    - ssh $CI_USER@$CI_HOST 'cd cattr/backend && composer7.4 install'
    - ssh $CI_USER@$CI_HOST 'cd cattr/backend && sentry-cli releases new $(php7.4 artisan cattr:version)'
    - ssh $CI_USER@$CI_HOST 'cd cattr/backend && sentry-cli releases set-commits $(php7.4 artisan cattr:version) --auto'
    - ssh $CI_USER@$CI_HOST 'php7.4 cattr/backend/artisan config:cache'
    - ssh $CI_USER@$CI_HOST 'php7.4 cattr/backend/artisan migrate --force'
    - ssh $CI_USER@$CI_HOST 'cd cattr/backend && sentry-cli releases deploys $(php7.4 artisan cattr:version) new -e $(cat .env | grep "APP_ENV=.*" | cut -d"=" -f 2)'
    - ssh $CI_USER@$CI_HOST 'cd cattr/backend && sentry-cli releases finalize $(php7.4 artisan cattr:version)'

staging_deploy:
  image: alpine
  stage: deploy
  only:
    - staging
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$STAGING_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $STAGING_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && git pull'
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && git submodule update --init'
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && composer install'
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && composer dump-autoload'
    - ssh $STAGING_USER@$STAGING_HOST 'cp -f backend/.env.staging backend/.env && cat backend/.env.sentry >> backend/.env'
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && sentry-cli releases new $(php artisan cattr:version)'
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && sentry-cli releases set-commits $(php artisan cattr:version) --auto'
    - ssh $STAGING_USER@$STAGING_HOST 'php backend/artisan route:clear'
    - ssh $STAGING_USER@$STAGING_HOST 'php backend/artisan cache:clear'
    - ssh $STAGING_USER@$STAGING_HOST 'php backend/artisan config:cache'
    - ssh $STAGING_USER@$STAGING_HOST 'php backend/artisan migrate --force'
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && sentry-cli releases deploys $(php artisan cattr:version) new -e $(cat .env | grep "APP_ENV=.*" | cut -d"=" -f 2)'
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && sentry-cli releases finalize $(php artisan cattr:version)'

demo_deploy:
  image: alpine
  stage: deploy
  only:
    - release
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$DEMO_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $DEMO_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $DEMO_USER@$DEMO_HOST 'cd cattr/demo && docker-compose build --no-cache --force-rm demo'
    - ssh $DEMO_USER@$DEMO_HOST 'cd cattr/demo && docker-compose down -v && docker-compose up -d demo'
